generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  password       String
  avatarUrl      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  accountId      String   @unique @default(uuid())
  initialBalance Float?

  transactions           Transaction[]    @relation("userTransactions")
  sentTransactions       Transaction[]    @relation("senderTransactions")
  receivedTransactions   Transaction[]    @relation("recipientTransactions")
  budgets                Budget[]
  pots                   Pot[]
  recurringBills         RecurringBill[]  @relation("userRecurringBills")
  sentRecurringBills     RecurringBill[]  @relation("recurringBillSender")
  receivedRecurringBills RecurringBill[]  @relation("recurringBillRecipient")
  accounts               Account[]
  // sessions          Session[]
  recurringAlerts        RecurringAlert[]
  budgetAlerts           BudgetAlert[]

  notifications      Notification[]
  passwordRecoveries PasswordRecovery[]

  @@map("users")
}

// ==================== Authentication Models ====================
model PasswordRecovery {
  id     String  @id @default(uuid())
  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  token  String  @unique
  used   Boolean @default(false)

  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId])
  @@index([token])
}

model Transaction {
  id          String    @id @default(uuid())
  description String?
  amount      Float
  createdAt   DateTime  @default(now())
  date        DateTime  @default(now())
  isRecurring Boolean   @default(false)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  senderId    String?
  sender      User?     @relation("senderTransactions", fields: [senderId], references: [accountId], onDelete: SetNull)
  recipientId String?
  recipient   User?     @relation("recipientTransactions", fields: [recipientId], references: [accountId], onDelete: SetNull)
  userId      String
  user        User      @relation("userTransactions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([categoryId])
  @@index([senderId])
  @@index([recipientId])
  @@map("transactions")
}

model RecurringBill {
  id                  String    @id @default(uuid())
  description         String?
  amount              Float
  recurrenceDay       Int?
  recurrenceFrequency String?
  categoryId          String?
  category            Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  userId              String
  user                User      @relation("userRecurringBills", fields: [userId], references: [id], onDelete: Cascade)
  senderId            String?
  sender              User?     @relation("recurringBillSender", fields: [senderId], references: [accountId], onDelete: SetNull)
  recipientId         String?
  recipient           User?     @relation("recurringBillRecipient", fields: [recipientId], references: [accountId], onDelete: SetNull)

  @@index([userId])
  @@index([categoryId])
  @@index([senderId])
  @@index([recipientId])
  @@map("recurring_bills")
}

model Category {
  id             String          @id @default(uuid())
  name           String          @unique
  transactions   Transaction[]
  budgets        Budget[]
  recurringBills RecurringBill[]

  @@map("categories")
}

model Budget {
  id         String   @id @default(uuid())
  amount     Float
  createdAt  DateTime @default(now())
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  themeId    String?
  theme      Theme?   @relation("budgetThemes", fields: [themeId], references: [id], onDelete: SetNull)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([categoryId])
  @@index([themeId])
  @@map("budgets")
}

model Pot {
  id            String  @id @default(uuid())
  name          String
  targetAmount  Float
  currentAmount Float   @default(0)
  userId        String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  themeId       String?
  theme         Theme?  @relation("potThemes", fields: [themeId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([themeId])
  @@map("pots")
}

model Theme {
  id          String   @id @default(uuid())
  color       String   @unique
  description String?
  budgets     Budget[] @relation("budgetThemes")
  pots        Pot[]    @relation("potThemes")

  @@map("themes")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// model Session {
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// ==================== Smart Features Models ====================
model RecurringAlert {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactionId    String?
  pattern          String // e.g., "WEEKLY", "MONTHLY"
  lastDetectedDate DateTime
  alertSent        Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model BudgetAlert {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  budgetCategory      String
  thresholdPercentage Int // 80, 100
  alertSent           Boolean @default(false)

  createdAt DateTime @default(now())

  @@unique([userId, budgetCategory, thresholdPercentage])
  @@index([userId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  message   String
  type      String // "BUDGET_ALERT", "BILL_REMINDER", "RECURRING_DETECTED"
  link      String? // URL to navigate to
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
  @@map("notifications")
}
